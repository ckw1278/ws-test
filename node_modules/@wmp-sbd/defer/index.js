'use strict';

const deferred = require('deferred');

/**
 * callback 형태의 function 을 promise 형태로 사용할 수 있도록 제공
 * fn 에서 사용할 파라미터에서 callback을  제외한 파라미터만 전달(내부에서 전달받은 파라미터에 callback function 자동 추가)
 * ex) await defer(review, review.builder)(ret.list, listType, 'HUMAN');
 *
 * @param thisArg fn 내부에서 this 에 할당될 객체
 * @param fn 사용하고자 하는 callback function
 * @return {Function}
 */
module.exports = (thisArg, fn) => {
  return function() {
    const def = deferred();
    const args = arguments;

    args[args.length.toString()] = function() {
      const result = Object.values(arguments);

      if(result[0]) {
        def.reject(result[0]);
      } else {
        def.resolve(result[1]);
      }
    };

    try {
      fn.apply(thisArg, Object.values(args));
    } catch (e) {
      def.reject(e);
    }

    return def.promise;
  };
};