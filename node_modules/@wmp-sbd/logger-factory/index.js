'use strict';

const config = require('@wmp-sbd/config');
const winston = require('winston');
const winstonCloudWatch = require('winston-cloudwatch');
const path = require('path');
const fs = require('fs');

/**
 * Create logger instances
 * 개발환경에서는 콘솔과 파일에 그 외(staging, prod) 환경에서는 cloudwatch 에 로그를 기록한다.
 *
 * @param streamName
 */

class Logger {
  create(streamName, groupName, jsonConsole = false) {
    const logger = new winston.Logger();

    if(!streamName) {
      streamName = 'syslog';
    }

    if(!groupName) {
      const packageInfo = require(path.join(global.appRoot, 'package.json'));
      groupName = packageInfo.name;
    }

    logger.add(winston.transports.Console, {
      level : config.get('logger.console.level'),
      json: jsonConsole,
      colorize: true,
      humanReadableUnhandledException: true
    });

    // development : 파일로만 기록
    if(process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'productionlocal') {
      const logFolerPath = process.cwd() + '/logs/';
      const logFolderExists = fs.existsSync(logFolerPath);
      if (!logFolderExists) {
        fs.mkdirSync(logFolerPath);
      }
      logger.add(winston.transports.File, {
        level: config.get('logger.file.level'),
        prettyPrint: true,
        filename: logFolerPath + streamName + '.log',
        maxsize: 100000000, //100M
        maxFiles: 5,
        tailable: true
      });
    } else { // staging, production : cloudwatch 에 저장
      logger.add(winstonCloudWatch, {
        level: config.get('logger.cloudWatch.level'),
        jsonMessage: true,
        logGroupName:  groupName + '-' + process.env.NODE_ENV,
        logStreamName: streamName,
        awsAccessKeyId: config.get('aws.accessKeyId'),
        awsSecretKey: config.get('aws.secretAccessKey'),
        awsRegion: config.get('logger.cloudWatch.region'),
        uploadRate: 60000,
        errorHandler: (err) => {
          console.dir(err);
        }
      });
    }

    logger.setLevels(winston.config.syslog.levels);

    return logger;
  }

  captureConsoleLog(logger) {
    console.log = logger.info;
    console.info = logger.info;
    console.warn = logger.warning;
    console.error = logger.error;
    console.debug = logger.debug;
  }
}

module.exports = new Logger();