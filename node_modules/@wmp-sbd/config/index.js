'use strict';

// 환경에 따라 설정 파일 로딩
const Config = function(path) {
  this.dic = require(path);
};

// 상수
Config.prototype.PRODUCTION = 'production';
Config.prototype.PRODUCTIONLOCAL = 'productionlocal';
Config.prototype.DEVELOPMENT = 'development';
Config.prototype.STAGING = 'staging';
Config.prototype.QA = 'qa';

Config.prototype.isDevelopment = function() { return this.env() === this.DEVELOPMENT; };
Config.prototype.isStaging = function() { return this.env() === this.STAGING; };
Config.prototype.isProduction = function() { return this.env() === this.PRODUCTION; };
Config.prototype.isProductionLocal = function() { return this.env() === this.PRODUCTIONLOCAL; };
Config.prototype.isQa = function() { return this.env() === this.QA; };

Config.prototype.env = function() {
  if(process.env.NODE_ENV === 'production') {
    return this.PRODUCTION;
  } else if(process.env.NODE_ENV === 'staging') {
    return this.STAGING;
  } else if(process.env.NODE_ENV === 'qa') {
    return this.QA;
  } else if(process.env.NODE_ENV === 'productionlocal') {
    return this.PRODUCTIONLOCAL;
  } else { // Development
    return this.DEVELOPMENT;
  }
};

Config.prototype.get = function(key) {
  let keys = key.split('.');

  let cursor = this.dic;

  for(let currentKey of keys) {
    if(!cursor.hasOwnProperty(currentKey)) {
      throw 'Undefined config key : ' + key + ' / ' + currentKey;
    } else {
      cursor = cursor[currentKey];
    }
  };

  return cursor;
};


function loadConfig(path) {
  if(global.hasOwnProperty('appConfig')) {
    return new Config(global.appConfig);
  } else {
    if(!global.hasOwnProperty('appRoot')) {
      throw new Error('appRoot not defined in global variable.');
    }

    let filename;
    if(process.env.NODE_ENV === Config.prototype.PRODUCTION) {
      filename = 'production.json';
    } else if(process.env.NODE_ENV === Config.prototype.STAGING) {
      filename = 'staging.json';
    } else if(process.env.NODE_ENV === Config.prototype.QA) {
      filename = 'qa.json';
    } else if(process.env.NODE_ENV === Config.prototype.PRODUCTIONLOCAL) {
      filename = 'productionlocal.json';
    } else { // Development
      filename = 'development.json';
    }
    return new Config(global.appRoot + '/config/' + filename);
  }
}

module.exports = loadConfig();